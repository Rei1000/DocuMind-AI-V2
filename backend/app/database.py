"""
KI-QMS Datenbank-Konfiguration und Session-Management

Dieses Modul verwaltet die zentrale Datenbank-Konfiguration f√ºr das
KI-gest√ºtzte Qualit√§tsmanagementsystem. Es stellt SQLAlchemy-Engine,
Session-Factory und Dependency-Injection f√ºr FastAPI bereit.

Technische Details:
- SQLite-Datenbank f√ºr MVP (einfache Deployment)
- SQLAlchemy ORM f√ºr Datenbankoperationen
- Connection Pooling f√ºr Performance
- Automatische Session-Verwaltung mit Dependency Injection
- Check_same_thread=False f√ºr Multi-Threading-Unterst√ºtzung

Produktion-√úberlegungen:
- F√ºr Produktion: PostgreSQL/MySQL empfohlen
- Umgebungsvariablen f√ºr DB-Credentials
- Connection Pool Size Tuning
- Read-Write Replica Support

Autoren: KI-QMS Entwicklungsteam
Version: 1.0.0 (MVP Phase 1)
"""

from sqlalchemy import create_engine, Column, Integer, String, Text, DateTime, Boolean, ForeignKey, event
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from datetime import datetime
import os

# ===== DATENBANK-KONFIGURATION =====

# SQLite-Datenbankpfad (relativ zum Backend-Verzeichnis)
# In Produktion durch Umgebungsvariable DATABASE_URL ersetzen
DATABASE_URL = "sqlite:///./qms_mvp.db"

# SQLAlchemy-Engine mit SQLite-spezifischen Optimierungen
engine = create_engine(
    DATABASE_URL,
    # SQLite-spezifische Optionen f√ºr FastAPI-Kompatibilit√§t
    connect_args={
        "check_same_thread": False,    # Erlaubt Multi-Threading-Zugriff
        "timeout": 30                  # Connection-Timeout in Sekunden
    },
    # Performance-Optimierungen
    pool_size=20,                      # Anzahl persistenter Connections
    max_overflow=30,                   # Zus√§tzliche Connections bei Bedarf
    pool_pre_ping=True,                # Validiert Connections vor Nutzung
    echo=False                         # SQL-Logging (f√ºr Debug auf True setzen)
)

# Session-Factory f√ºr Datenbank-Operationen
# autocommit=False: Explizite Transaktions-Kontrolle
# autoflush=False: Bessere Performance, manueller Flush
SessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine
)

# Deklarative Basis f√ºr alle ORM-Modelle
# Alle Model-Klassen erben von dieser Basis
Base = declarative_base()

# ===== SQLITE-OPTIMIERUNGEN =====

def _set_sqlite_pragma(dbapi_connection, connection_record):
    """
    SQLite-Performance-Optimierungen bei jeder neuen Connection.
    
    Aktiviert wichtige SQLite-Features f√ºr bessere Performance
    und Datenintegrit√§t im Produktions-√§hnlichen Betrieb.
    
    Args:
        dbapi_connection: Raw SQLite-Connection
        connection_record: SQLAlchemy Connection Record
        
    Optimierungen:
        - Foreign Key Constraints f√ºr Referentielle Integrit√§t
        - WAL-Mode f√ºr bessere Concurrency
        - Synchronous=NORMAL f√ºr Performance/Sicherheit-Balance
        - Memory-Mapped I/O f√ºr Speed
        - Optimierte Cache-Gr√∂√üe
    """
    cursor = dbapi_connection.cursor()
    try:
        # Aktiviere Foreign Key Constraints (standardm√§√üig deaktiviert)
        cursor.execute("PRAGMA foreign_keys=ON")
        
        # WAL-Mode f√ºr bessere Multi-User-Performance
        cursor.execute("PRAGMA journal_mode=WAL")
        
        # Synchronization-Mode: NORMAL (Performance/Sicherheit-Balance)
        cursor.execute("PRAGMA synchronous=NORMAL")
        
        # Memory-Mapped I/O f√ºr bessere Performance
        cursor.execute("PRAGMA mmap_size=268435456")  # 256MB
        
        # Cache-Gr√∂√üe f√ºr h√§ufig genutzte Pages
        cursor.execute("PRAGMA cache_size=10000")      # 10000 Pages ~40MB
        
        # Optimierter Page-Size (Standard: 4096)
        cursor.execute("PRAGMA page_size=4096")
        
        # Auto-Vacuum f√ºr Speicher-Effizienz
        cursor.execute("PRAGMA auto_vacuum=INCREMENTAL")
    finally:
        cursor.close()

# Event-Listener f√ºr SQLite-Optimierungen bei jeder Connection
event.listen(engine, "connect", _set_sqlite_pragma)

# ===== DATABASE SESSION MANAGEMENT =====

def get_db():
    """
    FastAPI Dependency f√ºr Datenbank-Session-Management.
    
    Stellt eine SQLAlchemy-Session f√ºr Request-Handler bereit und
    gew√§hrleistet automatische Cleanup-Operationen nach Request-Ende.
    
    Funktionsweise:
    1. Erstellt neue Session f√ºr jeden Request
    2. Stellt Session via Dependency Injection bereit  
    3. Schlie√üt Session automatisch nach Request-Ende
    4. Rollback bei Exceptions f√ºr Datenbank-Konsistenz
    
    Yields:
        Session: SQLAlchemy-Session f√ºr Datenbankoperationen
        
    Usage:
        ```python
        @app.get("/api/example")
        async def example_endpoint(db: Session = Depends(get_db)):
            return db.query(Model).all()
        ```
        
    Error Handling:
        - Automatischer Rollback bei Exceptions
        - Session wird immer geschlossen (finally-Block)
        - Connection Pool Management durch SQLAlchemy
        
    Performance:
        - Session-Scope: Ein Request
        - Connection Reuse durch Pool
        - Lazy Loading f√ºr Relationships
    """
    # Erstelle neue Session f√ºr diesen Request
    db = SessionLocal()
    try:
        # Stelle Session f√ºr Request-Handler bereit
        yield db
        
        # Expliziter Commit wird in Handler-Logik durchgef√ºhrt
        # Kein automatischer Commit hier f√ºr bessere Kontrolle
        
    except Exception as e:
        # Rollback bei jeder Exception f√ºr Datenbank-Konsistenz
        db.rollback()
        raise e
        
    finally:
        # Session immer schlie√üen f√ºr Connection Pool Cleanup
        db.close()

def create_tables():
    """
    Erstellt alle Datenbank-Tabellen basierend auf SQLAlchemy-Modellen.
    
    Liest alle in models.py definierten Modell-Klassen und erstellt
    entsprechende Tabellen in der Datenbank. Verwendet CREATE TABLE IF NOT EXISTS
    f√ºr idempotente Ausf√ºhrung.
    
    Funktionalit√§t:
    - Erstellt alle Tabellen aus Base.metadata
    - Idempotent: √úberspringt bereits existierende Tabellen
    - Erstellt Indizes und Constraints automatisch
    - Foreign Key Relations werden ber√ºcksichtigt
    
    Usage:
        ```python
        # Beim Application Startup
        create_tables()
        ```
        
    Note:
        - F√ºhrt keine Daten-Migration durch
        - √Ñndert keine existierenden Tabellen-Strukturen
        - F√ºr Schema-√Ñnderungen: Alembic migrations empfohlen
        
    Error Handling:
        - Wirft SQLAlchemy-Exceptions bei Schema-Problemen
        - Transaktion wird automatisch gerollt bei Fehlern
    """
    try:
        # Importiere alle Modelle um Base.metadata zu populieren
        from . import models
        
        # Erstelle alle Tabellen aus den registrierten Modellen
        Base.metadata.create_all(bind=engine)
        
        print("‚úÖ Datenbank-Tabellen erfolgreich erstellt/√ºberpr√ºft")
        
    except Exception as e:
        print(f"‚ùå Fehler beim Erstellen der Datenbank-Tabellen: {e}")
        raise e

# ===== UTILITY FUNCTIONS =====

def get_db_info():
    """
    Liefert Informationen √ºber die aktuelle Datenbank-Konfiguration.
    
    N√ºtzlich f√ºr Debugging, Monitoring und Gesundheitschecks.
    
    Returns:
        dict: Datenbank-Konfigurationsinformationen
        
    Example Response:
        ```json
        {
            "database_url": "sqlite:///./qms_mvp.db",
            "engine_name": "sqlite",
            "pool_size": 20,
            "max_overflow": 30,
            "total_tables": 8,
            "table_names": ["users", "interest_groups", ...]
        }
        ```
    """
    from . import models
    
    return {
        "database_url": DATABASE_URL,
        "engine_name": engine.name,
        "pool_size": engine.pool.size(),
        "max_overflow": engine.pool._max_overflow,
        "total_tables": len(Base.metadata.tables),
        "table_names": list(Base.metadata.tables.keys())
    }

def check_database_connection():
    """
    √úberpr√ºft die Datenbank-Konnektivit√§t f√ºr Gesundheitschecks.
    
    F√ºhrt eine einfache Query aus um sicherzustellen, dass die
    Datenbank erreichbar und funktionsf√§hig ist.
    
    Returns:
        bool: True wenn Verbindung erfolgreich, False bei Fehler
        
    Usage:
        ```python
        if not check_database_connection():
            raise HTTPException(503, "Datenbank nicht verf√ºgbar")
        ```
        
    Note:
        - Verwendet minimale Query f√ºr geringe Latenz
        - Timeout nach 5 Sekunden
        - F√ºr API-Health-Endpoints geeignet
    """
    try:
        # Einfache Query um Connection zu testen
        with engine.connect() as connection:
            result = connection.execute("SELECT 1")
            return result.fetchone()[0] == 1
            
    except Exception as e:
        print(f"‚ö†Ô∏è Datenbank-Verbindungstest fehlgeschlagen: {e}")
        return False

# ===== DEVELOPMENT HELPERS =====

def reset_database():
    """
    L√∂scht und erstellt alle Tabellen neu (nur f√ºr Development!).
    
    ‚ö†Ô∏è WARNUNG: L√∂scht alle Daten unwiderruflich!
    Nur f√ºr Development und Testing verwenden.
    
    Funktionalit√§t:
    - L√∂scht alle Tabellen
    - Erstellt Schema neu
    - Initialisiert leere Datenbank
    
    Usage:
        ```python
        # Nur in Development!
        if os.getenv("ENVIRONMENT") == "development":
            reset_database()
        ```
    """
    import warnings
    
    # Warnung f√ºr Produktions-Sicherheit
    warnings.warn(
        "reset_database() l√∂scht alle Daten! Nur f√ºr Development verwenden!",
        UserWarning,
        stacklevel=2
    )
    
    try:
        from . import models
        
        # L√∂sche alle Tabellen
        Base.metadata.drop_all(bind=engine)
        print("üóëÔ∏è Alle Tabellen gel√∂scht")
        
        # Erstelle Schema neu
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Datenbank-Schema neu erstellt")
        
    except Exception as e:
        print(f"‚ùå Fehler beim Reset der Datenbank: {e}")
        raise e

# ===== EXPORTS =====
# Haupts√§chlich genutzte Objekte f√ºr Import in anderen Modulen

__all__ = [
    "engine",          # SQLAlchemy Engine
    "SessionLocal",    # Session Factory
    "Base",           # Deklarative Basis f√ºr Modelle
    "get_db",         # FastAPI Dependency
    "create_tables",  # Schema-Erstellung
    "get_db_info",    # DB-Informationen
    "check_database_connection"  # Health Check
] 